---
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode" aria-pressed="false" type="button">
  <svg id="sun-icon" class="theme-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg id="moon-icon" class="theme-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    background: none;
    border: 2px solid var(--accent);
    border-radius: 6px;
    padding: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    color: var(--accent);
    position: relative;
    width: 44px;
    height: 44px;
  }

  .theme-toggle:hover {
    background-color: var(--accent);
    color: white;
    transform: scale(1.05);
  }

  .theme-icon {
    position: absolute;
    transition: all 0.3s ease;
  }

  /* Default light mode - show moon icon */
  #sun-icon {
    opacity: 0;
    transform: rotate(180deg);
  }

  #moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  /* Dark mode - show sun icon */
  :root[data-theme="dark"] #sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  :root[data-theme="dark"] #moon-icon {
    opacity: 0;
    transform: rotate(-180deg);
  }

  @media (max-width: 720px) {
    .theme-toggle {
      width: 40px;
      height: 40px;
      padding: 0.4rem;
    }
  }
</style>

<script>
  // Theme toggle functionality
  function initTheme() {
    const themeToggle = document.getElementById('theme-toggle');
    const html = document.documentElement;
    
    // Check for saved theme preference or default to light mode
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = savedTheme || (prefersDark ? 'dark' : 'light');
    
    // Apply the theme
    if (theme === 'dark') {
      html.setAttribute('data-theme', 'dark');
    } else {
      html.removeAttribute('data-theme');
    }
    
    // Toggle theme function
    function toggleTheme() {
      const currentTheme = html.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      if (newTheme === 'dark') {
        html.setAttribute('data-theme', 'dark');
        themeToggle?.setAttribute('aria-pressed', 'true');
        themeToggle?.setAttribute('aria-label', 'Switch to light mode');
      } else {
        html.removeAttribute('data-theme');
        themeToggle?.setAttribute('aria-pressed', 'false');
        themeToggle?.setAttribute('aria-label', 'Switch to dark mode');
      }
      
      localStorage.setItem('theme', newTheme);
      
      // Announce theme change to screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Switched to ${newTheme} mode`;
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
    
    // Add event listener
    themeToggle?.addEventListener('click', toggleTheme);
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        if (e.matches) {
          html.setAttribute('data-theme', 'dark');
        } else {
          html.removeAttribute('data-theme');
        }
      }
    });
  }
  
  // Initialize theme on page load
  document.addEventListener('DOMContentLoaded', initTheme);
  
  // Also initialize immediately for faster theme application
  initTheme();
</script>